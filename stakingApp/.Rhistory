library(shiny)
install.packages(shiny)
install.packages("shiny")
download.packages("leaflet")
download.packages("leaflet")
install.packages("leaflet")
install.packages("osrm")
library(leaflet)
install.packages("rgdal")
install.packages("viridis")
library(shiny)
library(shinythemes)
install.packages("shinythemes")
library(shinythemes)
shinyUI(fluidPage(theme = shinytheme('paper'),
headerPanel(title = "Drive Time Isochrone"),
sidebarLayout(
sidebarPanel(
tags$p("Powered by:"),
tags$a(href = 'http://project-osrm.org/',
"Open Source Routing Machine"),
br(),
br(),
selectInput("bgmap", "Background Map",
selected = leaflet::providers$OpenStreetMap,
choices = setNames(providers,
gsub("\\.", " ", providers))
),
numericInput("lat",
"Latitude",
41.2524,
min = -90,
max = 90),
numericInput("lon",
"Longitude",
-95.9980,
min = -180,
max = 180),
selectInput("driveTime",
"Drive Time (min.)",
seq(10, 60, 5),
selected = seq(10, 60, 5),
multiple = TRUE),
actionButton("submit", "Submit",
icon = icon("ok",
lib = "glyphicon")),
br(),
br(),
selectInput("shapeOutput",
"Select Output Type",
c("Shapefile" = ".shp",
"GeoJSON" = ".geojson"),
selected = ".geojson"
),
downloadButton("dlIsochrone", "Download")
),
mainPanel(
leafletOutput("map", height = 600)
)
)
))
library(shiny)
library(leaflet)
library(osrm)
library(rgdal)
library(sp)
library(sf)
library(viridis)
shinyServer(function(input, output) {
isoCoords <- reactive({
coords <- c(lat = input$lat,
lon = input$lon)
coords
})
isochrone <- eventReactive(input$submit, {
withProgress(message = 'Sending Request',
isochrone <- osrmIsochrone(loc = c(isoCoords()[['lon']],
isoCoords()[['lat']]),
breaks = as.numeric(input$driveTime),
res = 30) %>%
st_as_sf()
)
isochrone
})
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers[['OpenStreetMap']])
})
observeEvent(input$submit , {
steps <- sort(as.numeric(input$driveTime))
isochrone <- cbind(steps = steps[isochrone()[['id']]], isochrone())
pal <- colorFactor(viridis::plasma(nrow(isochrone), direction = -1),
isochrone$steps)
leafletProxy("map") %>%
clearShapes() %>%
clearMarkers() %>%
clearControls() %>%
addPolygons(data = isochrone,
weight = .5,
color = ~pal(steps)) %>%
addLegend(data = isochrone,
pal = pal,
values = ~steps,
title = 'Drive Time (min.)',
opacity = 1) %>%
addMarkers(lng = input$lon, input$lat) %>%
setView(isoCoords()[['lon']], isoCoords()[['lat']], zoom = 9)
})
observe({
leafletProxy("map") %>%
clearTiles() %>%
addProviderTiles(providers[[input$bgmap]])
})
output$dlIsochrone <- downloadHandler(
filename = function() {
paste0("drivetime_isochrone", input$shapeOutput)
},
content = function(file) {
st_write(isochrone(), file)
}
)})
shiny::runApp('C:/Dev/Staking Isochrone/Temp/Library/testing_events')
shiny::runApp('C:/Dev/Staking Isochrone/Temp/Library/testing_events')
shiny::runApp('C:/Dev/Staking Isochrone/Temp/Library/testing_events')
shiny::runApp('C:/Dev/Staking Isochrone/Temp/Library/testing_events')
shiny::runApp('C:/Dev/Staking Isochrone/Temp/Library/testing_events')
install.packages("tidyverse")
df = read.csv(".Sample/sample_data.csv", stringsAsFactors = F)
df = read.csv("Sample/sample_data.csv", stringsAsFactors = F)
print(dirname(getwd()))
df = read.csv("./Sample/sample_data.csv", stringsAsFactors = F)
df = read.csv("./sample_data.csv", stringsAsFactors = F)
df = read.csv("./Sample/sample_data.csv", stringsAsFactors = F)
df = read.csv("./sample_data.csv", stringsAsFactors = F)
print(df)
#Load CSV data in Dataframe
df = read.csv("./sample_data.csv", header=TRUE, sep=",")
#Load CSV data in Dataframe
df = read.csv("./Sample/sample_data.csv", header=TRUE, sep=",")
#Load CSV data in Dataframe
df = read.csv("C:\Dev\Staking Isochrone\staking-appointments\Sample\sample_data.csv", header=TRUE, sep=",")
#Load CSV data in Dataframe
df = read.csv("C:/Dev/Staking Isochrone/staking-appointments/Sample/sample_data.csv", header=TRUE, sep=",")
head(df)
df$Longitude <- as.numeric(df[13])
#Construct Table from Data
datatable(head(raw_data))
library(knitr)
install.packages("DT")
#Load CSV data in Dataframe
#You'll have to update this path to wherever the Sample Data lives in your environment
raw_data = read.csv("C:/Dev/Staking Isochrone/staking-appointments/Sample/sample_data.csv", header=TRUE, sep=",")
#Construct Table from Data
##datatable(head(raw_data))
df$Latitude <- as.numeric(df$La)
shiny::runApp('C:/Dev/Staking Isochrone/staking-appointments/stakingApp')
runApp('C:/Dev/Staking Isochrone/staking-appointments/stakingApp')
#Generate RDS file for fast mapping
saveRDS(df, "./staking_data.rds")
#Generate RDS file for fast mapping
saveRDS(df, "staking_data.rds")
#Generate RDS file for fast mapping
saveRDS(df, "C:/Dev/Staking Isochrone/staking-appointments/Sample/staking_data.rds")
runApp('C:/Dev/Staking Isochrone/staking-appointments/stakingApp')
runApp('C:/Dev/Staking Isochrone/staking-appointments/stakingApp')
runApp('C:/Dev/Staking Isochrone/staking-appointments/stakingApp')
#Generate RDS file for fast mapping
data_file <- file.path(getwd(), "staking_data.rds")
print(data_file)
runApp('C:/Dev/Staking Isochrone/staking-appointments/stakingApp')
#Generate RDS file for fast mapping
saveRDS(df, "C:\Dev\Staking Isochrone\staking-appointments\stakingApp\staking_data.rds")
#Generate RDS file for fast mapping
saveRDS(df, "C:/Dev/Staking Isochrone/staking-appointments/stakingApp/staking_data.rds")
runApp('C:/Dev/Staking Isochrone/staking-appointments/stakingApp')
